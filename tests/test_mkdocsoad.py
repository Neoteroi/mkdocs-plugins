import textwrap
from unittest.mock import Mock

import pytest

from neoteroi.mkdocs.oad import MkDocsOpenAPIDocumentationPlugin

from . import get_resource_file_path


def make_mock_page(src_dir="docs", src_path="index.md"):
    mock_file = Mock()
    mock_file.src_dir = src_dir
    mock_file.src_path = src_path
    mock_page = Mock()
    mock_page.file = mock_file
    return mock_page


def test_markdown_without_oad():
    handler = MkDocsOpenAPIDocumentationPlugin()

    example = textwrap.dedent(
        """
        # Hello World!

        Lorem ipsum dolor sit amet.
        """.strip(
            "\n"
        )
    )

    result = handler.on_page_markdown(example, make_mock_page())
    assert result == example


@pytest.mark.parametrize("file_name", ["swagger.json", "swagger.yaml"])
def test_markdown_with_oad(file_name):
    file_path = get_resource_file_path(file_name)
    handler = MkDocsOpenAPIDocumentationPlugin()

    example = textwrap.dedent(
        f"""
        # Hello World!

        [OAD({file_path})]
        """.strip(
            "\n"
        )
    )

    result = handler.on_page_markdown(example, make_mock_page())

    # Note: not testing the full output since this responsibility belongs to the
    # essentials-openapi package
    assert "This Markdown has been generated by essentials-openapi" in result
    assert "# Swagger Petstore" in result
